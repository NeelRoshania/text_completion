**PostgreSQL backend database setup**
1. Create role, database and assign privalages
2. [Define connection string](https://docs.celeryq.dev/en/latest/userguide/configuration.html#database-backend-settings) per SQLAlchemy

**Task Queue setup** (to be refined)
1. Start services
    - postgresql: `service postgresql restart`
    - rabbitmq-server, `service rabbitmq-server restart`
2. Check message queues: `rabbitmqctl list_queues name messages messages_ready messages_unacknowledged`
3. Start worker, `celery -A celery_template worker --loglevel=INFO`
4. Run tests
	- Run a task: `res = add.apply_async(args=(5, 7), queue="celery_template_queue")`
	- Using Flower, check tasks & backend database - `celery_taskmeta`
    		- If new task_id's are not generated, 
        		- check message queues
        	- ensure celery worker server is running
	- Check logs generated in worker server 

**PostgreSQL installation & setup**
1. See (Ubuntu PostgreSQL)[https://help.ubuntu.com/community/PostgreSQL] for complete guide
2. Run `install_start_server.sh` - this will install and start the service
3. Check that the service is running `[ + ]  postgresql`
    - `service --status-all`
4. `sudo service postgresql restart` - to restart the service if required

### Repository setup
1. Authenticate with github 
    - SSH Agent
        - `eval "$(ssh-agent -s)"` to start agent 
        - `ssh-add -l` to check for existing keys
        - `ssh-add ~/.ssh/id_ed25519` to add SSH private key to ssh-agen
    - Test connection & authenticate, 
        - `ssh -T git@github.com`. See [Github SSH Authentication](https://docs.github.com/en/authentication).
2. Authentication troubleshooting
    - [Permission denied (publickey)](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)